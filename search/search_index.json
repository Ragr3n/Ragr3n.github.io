{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ragr3n Docs","text":"<p>A personal collection of documentation, links, code snippets, commands and other things that I should've remembered.</p>"},{"location":"cheat_sheet/","title":"Cheat Sheet","text":""},{"location":"cheat_sheet/#01-ssh-keys","title":"01 - SSH Keys","text":"<p>Create ssh keys for github and ssh</p> <pre><code>ssh-keygen -t ed25519 -C \"{{ EMAIL@EXAMPLE.COM }}\" -f ~/.ssh/ssh\nssh-keygen -t ed25519 -C \"{{ EMAIL@EXAMPLE.COM }}\" -f ~/.ssh/github\n</code></pre> <p>Edit ssh config and add below</p> <pre><code>nano .ssh/config\n</code></pre> <pre><code>Host github.com\n  HostName github.com\n  IdentityFile ~/.ssh/github\n\nHost *\n  IdentitiesOnly yes\n  IdentityFile ~/.ssh/ssh\n  User {{ USERNAME }}\n</code></pre>"},{"location":"cheat_sheet/#02-github","title":"02 - Github","text":"<p>Get github public key and add it to github account at https://github.com/settings/keys</p> <pre><code>cat .ssh/github.pub \n</code></pre> <p>Configure git</p> <pre><code>git config --global user.name \"{{ USERNAME }}\"\ngit config --global user.email \"{{ EMAIL@EXAMPLE.COM }}\"\n</code></pre> <p>Clone git to current folder or specified folder</p> <pre><code>git clone {{ REPO_URL }} .\ngit clone {{ REPO_URL }} {{ FOLDER }}\n</code></pre>"},{"location":"cheat_sheet/#03-gns3-proxmox-installation","title":"03 - GNS3 Proxmox installation","text":"<p>If using NixOS check wich version of GNS3 that is currently available NixOS packages GNS3. Install it in your prefferd way, I've added it to my homemanager packages.</p> <pre><code>  home = {\n    packages = with pkgs; [\n      ...\n      gns3-gui\n    ];\n  };\n</code></pre> <p>Download the same version of the GNS3 server from GNS3 Github.</p> <p>Extract the GNS3 zip so you are left with a OVA and upload it the proxmox server</p> <pre><code>unzip GNS3.VM.VMware.ESXI.2.2.50.zip\nscp \"GNS3 VM.ova\" root@10.0.10.10:/tmp/\n</code></pre> <p>SSH to the proxmox server untar the GNS3 VM.ova and import the ovf</p> <pre><code>cd /tmp/\ntar xvf 'GNS3 VM.ova'\nqm importovf 102 'GNS3 VM.ovf' local-zfs\nqm set 102 --cores 12 --memory 24576 --cpu cputype=host --balloon 1024\nqm set 102 --net0 \"virtio,bridge=vmbr0\"\n</code></pre>"},{"location":"homelab_2024/","title":"Homelab 2024","text":"<p>After years of running my homelab on my old gaming PC I decided to order some new parts this black friday. The goal was to set up a Proxmox host that is powerful enough to run networking LABs when i want but power efficient enough to keep running 24/7 without impacting my electricity bill to much. </p>"},{"location":"homelab_2024/#hardware","title":"Hardware","text":"<p>The hardware requirements i had on the new server was as below.</p> <ul> <li>Chassis<ul> <li>Smallish form factor</li> <li>Fit a ATX power supply (to minimize cost)</li> <li>Fit a minimum of 4 HDD:s</li> <li>Possibility to expand with a GPU for LLM:s in the future</li> </ul> </li> <li>Motherboard<ul> <li>M-ITX</li> <li>Intel network card</li> <li>Two M2 NVMe slots</li> <li>Four SATA ports</li> <li>A PCI-e slot</li> </ul> </li> <li>CPU<ul> <li>Quicksync support</li> <li>More cores than my previous build (8)   </li> </ul> </li> <li>Memory<ul> <li>As much as possible</li> </ul> </li> <li>Reasonable power usage.</li> </ul> <p>After quite a lot of research i ended up with these parts:</p> Type Item CPU Intel Core i5-13500 2.5 GHz 14-Core Processor CPU Cooler Noctua NH-L9i-17xx chromax.black 33.84 CFM CPU Cooler Motherboard Asus ROG STRIX B760-I GAMING WIFI Mini ITX LGA1700 Motherboard Memory Crucial Pro 96 GB (2 x 48 GB) DDR5-5600 CL46 Memory Storage Western Digital Blue 1 TB 2.5\" Solid State Drive Storage Western Digital Blue 1 TB 2.5\" Solid State Drive Storage Kingston KC3000 1.024 TB M.2-2280 PCIe 4.0 X4 NVME Solid State Drive Storage Kingston KC3000 1.024 TB M.2-2280 PCIe 4.0 X4 NVME Solid State Drive Storage Seagate IronWolf NAS 4 TB 3.5\" 5900 RPM Internal Hard Drive Storage Seagate IronWolf NAS 4 TB 3.5\" 5900 RPM Internal Hard Drive Case Fractal Design Node 304 Mini ITX Tower Case Power Supply Asus ROG Strix 650 W 80+ Gold Certified Fully Modular ATX Power Supply <p>PCPartPicker Part List</p> <p>The build was easy but I regret not getting a smaller PSU. The Node 304 fit the ATX PSU without any issues but a SFX PSU would have made the cable management and fitting a full length GPU in the future easier.</p>"},{"location":"homelab_2024/#proxmox-installation","title":"Proxmox installation","text":"<p>It's as easy as creating a bootable USB, boot from the USB and follow the installation wizard.</p> <p>I used a previously created Ventoy stick to which I added the latest Proxmox ISO. For storage I used two NVMe disks in a raidz mirror.</p> <p>After the installation completed I ran the Proxmox VE Post Install script from the community project Proxmox Helperscripts.</p> <p>This script provides options for managing Proxmox VE repositories, including disabling the Enterprise Repo, adding or correcting PVE sources, enabling the No-Subscription Repo, adding the test Repo, disabling the subscription nag, updating Proxmox VE, and rebooting the system.</p> <p>To use the script run below as root on the Proxmox server.</p> <pre><code>bash -c \"$(wget -qLO - https://github.com/community-scripts/ProxmoxVE/raw/main/misc/post-pve-install.sh)\"\n</code></pre> <p>In the future i might try to create a ansible role that does the same thing since it isn't exactly best practice to run a shell script as root from an external source.</p>"},{"location":"homelab_2024/#power-usage","title":"Power usage","text":"<p>One of the most important parts of the new build was to keep the power consumption at a minimum. Below are the steps I took to try to minimize consumption. </p>"},{"location":"homelab_2024/#bios","title":"BIOS","text":"<p>Update the BIOS by downloading the latest version from the Asus website, unzip it and transfer it to an empty USB stick. Boot in to BIOS, find the BIOS update utility and select the file that was transferred to the USB stick.</p> <p>Enable C-states, Native ASPM and disable all unused onboard devices as Wifi and HDA. I read that disabling turbo would help but I haven't seen that in my short term testing so I need to verify that. I also need to document the exact BIOS settings a bit more.</p>"},{"location":"homelab_2024/#cpu-scaling-governor","title":"CPU Scaling Governor","text":"<p>For this I used another script from Proxmox Helperscript. </p> <p>Description from the Proxmox Helperscript website:</p> <p>The CPU scaling governor determines how the CPU frequency is adjusted based on the workload, with the goal of either conserving power or improving performance. By scaling the frequency up or down, the operating system can optimize the CPU usage and conserve energy when possible. Generic Scaling Governors</p> <p>Run below as root on the Proxmox server.</p> <pre><code>bash -c \"$(wget -qLO - https://github.com/community-scripts/ProxmoxVE/raw/main/misc/scaling-governor.sh)\"\n</code></pre> <p>Select the powersaving scaling governor and add the cronjob.  </p>"},{"location":"homelab_2024/#powertop","title":"Powertop","text":"<p>I noticed that powertop in the apt repo was out of date so I had to build it from source since the older version was lacking support for 13th gen CPU:s. Below are the commands to build powertop from source. </p> <pre><code>apt install git build-essential autoconf-archive ncurses-dev libnl-3-dev libpci-dev pkg-config libtool-bin autopoint gettext libnl-genl-3-dev\ngit clone https://git.kernel.org/pub/scm/libs/libtrace/libtraceevent.git\ncd libtraceevent; make; make install; cd ..;\ngit clone https://git.kernel.org/pub/scm/libs/libtrace/libtracefs.git\ncd libtracefs; make; make install; cd ..;\ngit clone https://github.com/fenrus75/powertop.git\ncd powertop\n./autogen.sh\n./configure\nmake install\n</code></pre> <p>Running <code>powertop</code> in interactive mode shows what tunables are available and what C-states are being achieved by the CPU:s and package.</p> <p> </p> <p>Running <code>powertop --auto-tune</code> will set all tunables to GOOD. To make the tweaks persistent create a systemd service to run <code>powertop --auto-tune</code> at each boot.</p> <pre><code>nano /etc/systemd/system/powertop.service\n</code></pre> <p>Add below to that file.</p> <pre><code>[Unit]\nDescription=Powertop tunings\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nExecStart=/usr/local/sbin/powertop --auto-tune\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Reload systemctl and enable the service.</p> <pre><code>systemctl daemon-reload\nsystemctl enable powertop.service\n</code></pre>"},{"location":"homelab_2024/#auto-aspm","title":"Auto ASPM","text":"<p>Description from the Wikipedia site for ASPM:</p> <p>Active-state power management (ASPM) is a power management mechanism for PCI Express devices to garner power savings while otherwise in a fully active state. </p> <p>The Auto ASPM script enables ASPM for all PCIe devices that support it.</p> <p>Download the Auto ASPM Script and run it.</p> <pre><code>wget https://raw.githubusercontent.com/notthebee/AutoASPM/refs/heads/main/autoaspm.py\npython3 autoaspm.py\n00:06.0: Already has ASPM L0sL1 enabled\n00:1a.0: Already has ASPM L1 enabled\n00:1c.0: Already has ASPM L0sL1 enabled\n00:1c.2: Already has ASPM L1 enabled\n00:1d.0: Already has ASPM L0sL1 enabled\n01:00.0: Already has ASPM L1 enabled\n02:00.0: Already has ASPM L1 enabled\n04:00.0: Already has ASPM L1 enabled\n</code></pre> <p>Like with powertop create a service that runs it at each boot.</p> <pre><code>nano /etc/systemd/system/autoaspm.service\n</code></pre> <p>Add below to that file.</p> <pre><code>[Unit]\nDescription=Automatically activate ASPM on all supported devices\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/python3 /root/autoaspm.py\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Reload systemctl and enable the service.</p> <pre><code>systemctl daemon-reload\nsystemctl enable autoaspm.service\n</code></pre>"},{"location":"homelab_2024/#conclusion","title":"Conclusion","text":"<p>With only the NVME mirror and networking connected i was able to get the server to idle around 18W but if I disconnect the network cable it drops to 13W. I've tried updating to a kernel with newer drivers, disabling WOL, enabling EEE and combed the Internet for firmware patches but nothing seems to make a difference. I also tried to install a separate PCIe network card but it didn't make any difference either. My guess is that it might not be the network card that draws 5W but rather that the cpu package can't get to higher C-states while networking is active.</p>"},{"location":"homelab_2024/#credentials","title":"Credentials","text":"<p>To manage my homelab credentials for Github, Proxmox, VM:s and LXC:s are required. I use three separate SSH keys for authenticating, one with Github,one with Proxmox and one with the rest of my homelab. For Proxmox its's recommended to also generate API credentials to use with Ansible and OpenTofu. </p>"},{"location":"homelab_2024/#ssh","title":"SSH","text":"<p>Generate SSH keys with the commands below. You will be prompted to set a password for each key, it's recommended to do so.</p> <pre><code>ssh-keygen -t ed25519 -C \"$(whoami)@proxmox-$(hostname)\" -f ~/.ssh/proxmox \nssh-keygen -t ed25519 -C \"$(whoami)@homelab-$(hostname)\" -f ~/.ssh/homelab  \nssh-keygen -t ed25519 -C \"$(whoami)@github-$(hostname)\"  -f ~/.ssh/github\n</code></pre> <p>Copy the Proxmox public key to trusted hosts of the Proxmox server using ssh-copy-id.</p> <pre><code>ssh-copy-id -i ~/.ssh/proxmox root@10.0.10.10\n</code></pre> <p>Edit the SSH config to use the generated keys and specify which user to use.</p> <pre><code>nano ~/.ssh/config\n...\nHost github.com\n  HostName github.com\n  IdentityFile ~/.ssh/github\nHost 10.0.10.10\n  IdentityFile ~/.ssh/proxmox\n  User root\nHost 10.0.10.*\n  IdentityFile ~/.ssh/homelab\n  User robin\n...\n</code></pre> <p>Add the SSH-keys to the SSH-agent. That way you wont be prompted to enter a password for each SSH connection until you close the terminal.</p> <pre><code>eval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/proxmox\nssh-add ~/.ssh/homelab\nssh-add ~/.ssh/github\n</code></pre>"},{"location":"homelab_2024/#proxmox-api","title":"Proxmox API","text":"<p>To create Proxmox API credentials follow the steps bellow logged in as root on the Proxmox server.</p> <p>Add a user:</p> <pre><code>pveum user add homelab@pve\n</code></pre> <p>Create a role:</p> <pre><code>pveum role add HomeLab -privs \"Datastore.Allocate Datastore.AllocateSpace Datastore.AllocateTemplate Datastore.Audit Pool.Allocate Sys.Audit Sys.Console Sys.Modify SDN.Use VM.Allocate VM.Audit VM.Clone VM.Config.CDROM VM.Config.Cloudinit VM.Config.CPU VM.Config.Disk VM.Config.HWType VM.Config.Memory VM.Config.Network VM.Config.Options VM.Migrate VM.Monitor VM.PowerMgmt User.Modify\"\n</code></pre> <p>Assign the role to the new user:</p> <pre><code>pveum aclmod / -user homelab@pve -role HomeLab\n</code></pre> <p>Create a authentication token: </p> <pre><code>pveum user token add homelab@pve iac --privsep=0\n</code></pre> <p>Then you will presented with something similar to below, save the full-tokenid and value in a safe place for later.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 key          \u2502 value                                \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 full-tokenid \u2502 homelab@pve!iac                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 info         \u2502 {\"privsep\":\"0\"}                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 value        \u2502 207c9ff1-96f3-44d4-8439-87da57f5fc26 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"homelab_2024/#github","title":"Github","text":"<p>We have already generated the SSH key to use with Github but we need to add the public key to our Gihub account. </p> <p>Get the generated github public key and add it to your github account at Github keys</p> <pre><code>cat .ssh/github.pub\n</code></pre> <p>Configure git </p> <pre><code>git config --global user.name Ragr3n\ngit config --global user.email robin@ragren.com\n</code></pre>"},{"location":"homelab_2024/#homelab-repository","title":"Homelab repository","text":"<p>In a previous version of this project I had the ambition to deploy everything from Nix, to generate Terraform and Ansible code from nix run commands as well as building NixOS configurations. I managed to do that but it added to much complexity and I felt like I lost a bit of control. The build times increased and I wouldn't be able to reuse my code if I wanted to switch to something other than Nix. Therefore I've taken a step back and let Terraform, Ansible and NixOS be it's own and use the power of Nix when applicable.</p> <p>The rest of the commands in this write up I run on my laptop running NixOS. Any non Nix specific commands should work as long as there dependencies are installed eg. Ansible or OpenTofu.</p> <p>Below is a overview of the repository. The project is still in it's beginning so changes will occur as I go along.</p> <pre><code>.\n\u251c\u2500\u2500 ansible\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 inventory\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 roles\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ansible.cfg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 create-template-hassos-vm.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 create-template-nixos-lxc.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 create-template-nixos-vm.yml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 destroy-templates.yml\n\u251c\u2500\u2500 nixos\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hosts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 modules\n\u251c\u2500\u2500 secrets\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 secrets.yaml\n\u251c\u2500\u2500 tofu\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.tf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pve-lxc-nixos-01.tf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pve-vm-nixos-01.tf\n\u251c\u2500\u2500 .vscode\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 settings.json\n\u251c\u2500\u2500 flake.nix\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 .sops.yaml\n</code></pre> <p>We need to start by cloning the repository. (I need to make the repository public)</p> <pre><code>git clone XXX\n</code></pre> <p>The nix flake contains a dev shell which provides all dependencies as well as some aliases to make things easier.</p> <pre><code>  # flake.nix\n    devShell.${system} = pkgs.mkShell {\n      system = \"x86_64-linux\";\n      shellHook = ''\n        export HOMELABROOT=$(pwd)\n        alias hl-root=\"cd $HOMELABROOT\"\n        alias hl-ansible=\"cd $HOMELABROOT/ansible\"\n        alias hl-tofu=\"cd $HOMELABROOT/tofu\"\n        alias hl-update-ssh=\"hl-root &amp;&amp; nix run .#hl-update-ssh\"\n        alias hl-update-age=\"hl-root &amp;&amp; nix run .#hl-update-age\"\n    '';\n      packages = with pkgs; [\n        ansible\n        opentofu\n        nixos-generators\n        (pkgs.python3.withPackages (python-pkgs: [\n          python-pkgs.proxmoxer\n          python-pkgs.requests\n          python-pkgs.jmespath\n        ]))\n        ssh-to-age\n        yq-go\n      ];\n    };\n</code></pre> <p>To get in to the shell run.</p> <pre><code>nix develop\n</code></pre>"},{"location":"homelab_2024/#sops","title":"SOPS","text":"<p>SOPS is a editor that encrypts/decrypts files. One way to use SOPS is to store variables in a yaml file and encrypt the values using a age keypair derived from a SSH key. We can then use the variables in Ansible, Tofu and NixOS and store our secret variables in git.</p> <p>Create a folder to store age keys in and use the previously generated SSH key to create age keypair.</p> <pre><code>mkdir -p ~/.config/sops/age/\nnix run nixpkgs#ssh-to-age -- -private-key -i ~/.ssh/homelab &gt; ~/.config/sops/age/keys.txt\nnix shell nixpkgs#age -c age-keygen -y ~/.config/sops/age/keys.txt\n\nage1gwmxg9kqrkfqek4lkkv0l70tsjlvftj4jrevu6a8pf0m34smp43qc27wys\n</code></pre> <p>Copy the age key that is shown in the terminal and add it to the .sops.yaml file located in the root of the project. If the file doesn't exist create it with this content and change the age key to the one you generated.</p> <pre><code>keys:\n  - &amp;primary age1gwmxg9kqrkfqek4lkkv0l70tsjlvftj4jrevu6a8pf0m34smp43qc27wys\ncreation_rules:\n  - path_regex: secrets/[^/]+\\.(yaml|json|env|ini)$\n    #- path_regex: secrets/secrets.yaml$\n    key_groups:\n      - age:\n          - *primary\n</code></pre> <p>I've saved the clear text version of the secrets/secrets.yaml file in bitwarden but it's also possible to just take the content of secrets/secrets.yaml remove the sops: array and edit the variables since the variable names are stored in clear text. Then use below command to encrypt the file.</p> <pre><code>sops -i -e secrets/secrets.yaml\n</code></pre> <p>Be careful to not commit the file without first encrypting it. Use the VSCode extension @signageos/vscode-sops to easily edit SOPS encrypted files and automatically encrypt them.</p>"},{"location":"homelab_2024/#deploying-vms-and-lxcs","title":"Deploying VM:s and LXC:s","text":""},{"location":"homelab_2024/#templates","title":"Templates","text":"<p>I've created a couple of Ansible roles to deploy VM and LXC templates to Proxmox, this is how to use them.</p> <p>Change in to the Ansible directory, edit the inventory/proxmox.yaml file and run one or more playbooks to generate VM or LXC templates in Proxmox.</p> <pre><code>hl-ansible #Alias for cd *homelabdir*/ansible\ncode inventory/proxmox.yml\nansible-playbook create-template-nixos-vm.yml -i inventory/proxmox.yml\nansible-playbook create-template-nixos-lxc.yml -i inventory/proxmox.yml\nansible-playbook create-template-hassos-vm.ymlt -i inventory/proxmox.yml  \n</code></pre>"},{"location":"homelab_2024/#infrastructure-as-code","title":"Infrastructure as code","text":"<p>Terraform is a tool that makes it possible to define infrastructure as code and OpenTofu is a open source fork of Terraform.</p> <p>I've chosen to keep the provider config in the main.tf file and separate pve-****-.tf files for each deployed node. This way I can easily edit, create new or destroy nodes without affecting others.</p> <p>Change in to the tofu directory, copy and or edit tofu files as desired.</p> <pre><code>hl-tofu #Alias for cd *homelabdir*/tofu\ncode main.tf\ncp pve-vm-nixos-01.tf pve-vm-nixos-02.tf\ncode pve-vm-nixos-02.tf\n</code></pre> <p>Plan the config and make sure it looks alright and then apply it.</p> <pre><code>tofu plan\n# Output removed\ntofu apply \ndata.sops_file.secrets: Reading...\ndata.sops_file.secrets: Read complete after 0s [id=-]\nOpenTofu used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\n\nOpenTofu will perform the following actions:\n\n  # proxmox_virtual_environment_vm.vm-nixos-02 will be created\n  + resource \"proxmox_virtual_environment_vm\" \"vm-nixos-02\" {\n      + acpi                    = true\n      + bios                    = \"seabios\"\n      + id                      = (known after apply)\n      + ipv4_addresses          = (known after apply)\n      # Output abbreviated\n    }\n\nPlan: 1 to add, 0 to change, 0 to destroy.\n\nDo you want to perform these actions?\n  OpenTofu will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\n  Enter a value: yes\n\nproxmox_virtual_environment_vm.vm-nixos-02: Creating...\nproxmox_virtual_environment_vm.vm-nixos-02: Creation complete after 8s \n</code></pre>"},{"location":"homelab_2024/#managing-vms-and-lxcs","title":"Managing VM:s and LXC:s","text":""},{"location":"homelab_2024/#adding-keys-to-sops","title":"Adding keys to SOPS","text":"<p>To be able to deploy NixOS configurations that utilizes SOPS to remote servers, the remote servers age key needs to be added to the .sops.yaml file.</p> <p>To make the process a bit easier i've made a shell script (update-age) that takes an IP as input and then adds the public ssh key to known_hosts, adds the key to .sops.yaml and updates encryption keys for secrets/secrets.yaml</p> <pre><code>update-age \nIP-address: 10.0.10.30\nSyncing keys for file ./secrets/secrets.yaml\nThe following changes will be made to the file's groups:\nGroup 1\n    age1gwmxg9kqrkfqek4lkkv0l70tsjlvftj4jrevu6a8pf0m34smp43qc27wys\n+++ age1gwmxg9kqrkfqek4lkkv0l70tsjlvftj4jrevu6a8pf0m34smp43qc27hek\n</code></pre>"},{"location":"homelab_2024/#nixos","title":"NixOS","text":"<p>NixosConfigurations created in the flake.nix can be deployed by using nixos-rebuild and specifying --target-host</p> <pre><code>hl-root #Alias for cd *homelabdir*\nnixos-rebuild switch --flake .#vm-nixos-01 --target-host 10.0.10.30  --use-remote-sudo --build-host 10.0.10.30 --use-substitutes --fast\nnixos-rebuild switch --flake .#lxc-nixos-01 --target-host 10.0.10.31 --use-remote-sudo\n</code></pre>"},{"location":"homelab_2024/#reboot","title":"Reboot","text":"<p>It is probably a good idea to reboot the newly created LXC:s or VM:s once after creation and initial deploy. That can be accomplished by this one liner.</p> <pre><code>ssh 10.0.10.30 \"sudo reboot\"\nssh 10.0.10.31 \"sudo reboot\"\n</code></pre>"},{"location":"links/","title":"Links","text":""},{"location":"links/#dotfiles","title":"Dotfiles","text":"<ul> <li>MatthiasBenaets - Nixos, Hyprland, Eww, Waybar, Dunst</li> <li>Aylur - Nixos, AGS</li> </ul>"},{"location":"links/#color-palettes","title":"Color palettes","text":"<ul> <li>Nord </li> <li>Catppuccin</li> <li>Rose Pine</li> </ul>"},{"location":"new_homelab/","title":"New homelab 2024","text":"<p>My homelab was getting old so this black friday I decided to order some new parts. The purpose of this write up is to document the steps I took to set it up and how to reproduce it. </p> <p>This write up is coupled with a github repo containing all ansible, terraform, nixos and docker code.</p>"},{"location":"new_homelab/#hardware","title":"Hardware","text":"<p>My requirements for the homelab were: </p> <ul> <li>Smallish form factor.</li> <li>Fit minimum of 4 HDD:s.</li> <li>Be able to run containers and virtual machines for home automation, dns, backups and reverse proxy 24/7.</li> <li>Be able to run network labs when needed.</li> <li>A chassis that fit a ATX power supply.</li> <li>A option to in the future install a GPU for LLMs.</li> <li>Reasonable power usage.</li> </ul> <p>These are the parts I ordered:</p> Type Item CPU Intel Core i5-13500 2.5 GHz 14-Core Processor CPU Cooler Noctua NH-L9i-17xx chromax.black 33.84 CFM CPU Cooler Motherboard Asus ROG STRIX B760-I GAMING WIFI Mini ITX LGA1700 Motherboard Memory Crucial Pro 96 GB (2 x 48 GB) DDR5-5600 CL46 Memory Storage Western Digital Blue 1 TB 2.5\" Solid State Drive Storage Western Digital Blue 1 TB 2.5\" Solid State Drive Storage Kingston KC3000 1.024 TB M.2-2280 PCIe 4.0 X4 NVME Solid State Drive Storage Kingston KC3000 1.024 TB M.2-2280 PCIe 4.0 X4 NVME Solid State Drive Storage Seagate IronWolf NAS 4 TB 3.5\" 5900 RPM Internal Hard Drive Storage Seagate IronWolf NAS 4 TB 3.5\" 5900 RPM Internal Hard Drive Case Fractal Design Node 304 Mini ITX Tower Case Power Supply Asus ROG Strix 650 W 80+ Gold Certified Fully Modular ATX Power Supply <p>PCPartPicker Part List</p> <p>The build was easy but I regret not getting a smaller PSU. The Node 304 fit the ATX PSU without any issues but a SFX PSU would probably make the cable management easier and it would be easier to fit a full size GPU in the future.</p>"},{"location":"new_homelab/#proxmox-installation","title":"Proxmox installation","text":"<p>Create a bootable USB. I used a previously set up Ventoy stick to which i added the latest proxmox ISO.</p> <ul> <li>Ventoy getting started</li> <li>Proxmox ISO Download</li> </ul> <p>Boot from the USB and follow the installation guide. I choose to create a ZFS Raid1 mirror using the two NVME hard drives for Proxmox and VMs.</p> <p>After the installation is complete run the Proxmox VE Post Install helperscript.</p> <p>Description from the Proxmox Helperscript website:</p> <p>This script provides options for managing Proxmox VE repositories, including disabling the Enterprise Repo, adding or correcting PVE sources, enabling the No-Subscription Repo, adding the test Repo, disabling the subscription nag, updating Proxmox VE, and rebooting the system.</p> <p>Run below as root on the proxmox server.</p> <pre><code>bash -c \"$(wget -qLO - https://github.com/community-scripts/ProxmoxVE/raw/main/misc/post-pve-install.sh)\"\n</code></pre> <p>In the future i might try to create a ansible role that does the same thing since it isn't exactly best practice to run a shell script as root from an external source.</p>"},{"location":"new_homelab/#power-consumption","title":"Power consumption","text":""},{"location":"new_homelab/#bios","title":"BIOS","text":"<p>Update the BIOS by downloading the latest version from the Asus website, unzip it and transfer it to an empty USB stick. After that boot in to BIOS, find the BIOS update utility and selected the file that was transferred to the USB stick.</p> <p>Enable C-states and Native ASPM in BIOS as well as disable all unused onboard devices as Wifi and HDA. I read that disabling turbo would help but I haven't seen that in my short term idle testing so I need to verify that. I also need to document the exact BIOS settings a bit more.</p>"},{"location":"new_homelab/#os-settings","title":"OS Settings","text":"<p>Install powertop, change CPU governor and enable ASPM for all PCI devices.</p>"},{"location":"new_homelab/#cpu-scaling-governor","title":"CPU Scaling Governor","text":"<p>For this I used another script from Proxmox Helperscript. </p> <p>Description from the Proxmox Helperscript website:</p> <p>The CPU scaling governor determines how the CPU frequency is adjusted based on the workload, with the goal of either conserving power or improving performance. By scaling the frequency up or down, the operating system can optimize the CPU usage and conserve energy when possible. Generic Scaling Governors</p> <p>Run below as root on the proxmox server.</p> <pre><code>bash -c \"$(wget -qLO - https://github.com/community-scripts/ProxmoxVE/raw/main/misc/scaling-governor.sh)\"\n</code></pre> <p>Select the powersaving scaling governor and add the cronjob.  </p>"},{"location":"new_homelab/#powertop","title":"Powertop","text":"<p>I noticed that powertop in the apt repo was out of date so I had to build it from source since the older version was lacking support for 13th gen CPU:s. Below are the commands to build powertop from source. This could probably also be changed to a ansible script in the future.</p> <pre><code>apt install git build-essential autoconf-archive ncurses-dev libnl-3-dev libpci-dev pkg-config libtool-bin autopoint gettext libnl-genl-3-dev\ngit clone https://git.kernel.org/pub/scm/libs/libtrace/libtraceevent.git\ncd libtraceevent; make; make install; cd ..;\ngit clone https://git.kernel.org/pub/scm/libs/libtrace/libtracefs.git\ncd libtracefs; make; make install; cd ..;\ngit clone https://github.com/fenrus75/powertop.git\ncd powertop\n./autogen.sh\n./configure\nmake install\n</code></pre> <p>Running <code>powertop</code> in interactive mode shows what tunables are available and what C states are being achieved by the CPU cores and package.</p> <p> </p> <p>Running <code>powertop --auto-tune</code> will set all tunables to GOOD. To make the tweaks persistent create a systemd service to run <code>powertop --auto-tune</code> at each boot.</p> <pre><code>nano /etc/systemd/system/powertop.service\n</code></pre> <p>Add below to that file.</p> <pre><code>[Unit]\nDescription=Powertop tunings\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nExecStart=/usr/local/sbin/powertop --auto-tune\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Reload systemctl and enable the service.</p> <pre><code>systemctl daemon-reload\nsystemctl enable powertop.service\n</code></pre>"},{"location":"new_homelab/#auto-aspm","title":"Auto ASPM","text":"<p>Description from the Wikipedia site for ASPM:</p> <p>Active-state power management (ASPM) is a power management mechanism for PCI Express devices to garner power savings while otherwise in a fully active state. </p> <p>The Auto ASPM script enables ASPM for all PCIe devices that support it.</p> <p>Download the Auto ASPM Script and run it.</p> <pre><code>wget https://raw.githubusercontent.com/notthebee/AutoASPM/refs/heads/main/autoaspm.py\npython3 autoaspm.py\n00:06.0: Already has ASPM L0sL1 enabled\n00:1a.0: Already has ASPM L1 enabled\n00:1c.0: Already has ASPM L0sL1 enabled\n00:1c.2: Already has ASPM L1 enabled\n00:1d.0: Already has ASPM L0sL1 enabled\n01:00.0: Already has ASPM L1 enabled\n02:00.0: Already has ASPM L1 enabled\n04:00.0: Already has ASPM L1 enabled\n</code></pre> <p>Like with powertop create a service that runs it at each boot.</p> <pre><code>nano /etc/systemd/system/autoaspm.service\n</code></pre> <p>Add below to that file.</p> <pre><code>[Unit]\nDescription=Automatically activate ASPM on all supported devices\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/python3 /root/autoaspm.py\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Reload systemctl and enable the service.</p> <pre><code>systemctl daemon-reload\nsystemctl enable autoaspm.service\n</code></pre>"},{"location":"new_homelab/#conclusion","title":"Conclusion","text":"<p>With only the NVME mirror and networking connected i was able to get the server to idle around 18W but if I disconnect the network cable it drops to 13W. I've tried updating to a kernel with newer drivers, disabling WOL, enabling EEE and combed the Internet for firmware patches but nothing seems to make a difference. I also tried to install a separate PCIe network card but it didn't make any difference either. My guess is that it might not be the network card that draws 5W but rather that the cpu package can't get to higher C-states while networking is active.</p>"},{"location":"new_homelab/#ssh-credentials","title":"SSH credentials","text":"<p>Generate SSH keys with the commands below. You will be prompted to set a password for each key, it's recommended to do so. I use one key for github, one for proxmox and one for the rest of my homelab.</p> <pre><code>ssh-keygen -t ed25519 -C \"$(whoami)@proxmox-$(hostname)\" -f ~/.ssh/proxmox \nssh-keygen -t ed25519 -C \"$(whoami)@homelab-$(hostname)\" -f ~/.ssh/homelab  \nssh-keygen -t ed25519 -C \"$(whoami)@github-$(hostname)\"  -f ~/.ssh/github\n</code></pre> <p>Copy the proxmox public key to trusted hosts of the proxmox server using ssh-copy-id.</p> <pre><code>ssh-copy-id -i ~/.ssh/proxmox root@10.0.10.10\n</code></pre> <p>Edit the SSH config to use the generated key and specify which user to use.</p> <pre><code>nano ~/.ssh/config\n...\nHost github.com\n  HostName github.com\n  IdentityFile ~/.ssh/github\nHost 10.0.10.10\n  IdentityFile ~/.ssh/proxmox\n  User root\nHost 10.0.10.*\n  IdentityFile ~/.ssh/homelab\n  User robin\n...\n</code></pre> <p>Add the SSH keys to the SSH agent. That way you wont be prompted for the password for each ssh connection until you close the terminal.</p> <pre><code>eval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/proxmox\nssh-add ~/.ssh/homelab\nssh-add ~/.ssh/github\n</code></pre>"},{"location":"new_homelab/#proxmox-api-credentials","title":"Proxmox API credentials","text":"<p>To be able to use Ansible and Terraform to manage Proxmox it's recommended to use API credentials instead of username/password combination. To create those credentials follow the steps bellow logged in as root on the Proxmox server.</p> <p>Add a user:</p> <pre><code>pveum user add homelab@pve\n</code></pre> <p>Create a role:</p> <pre><code>pveum role add HomeLab -privs \"Datastore.Allocate Datastore.AllocateSpace Datastore.AllocateTemplate Datastore.Audit Pool.Allocate Sys.Audit Sys.Console Sys.Modify SDN.Use VM.Allocate VM.Audit VM.Clone VM.Config.CDROM VM.Config.Cloudinit VM.Config.CPU VM.Config.Disk VM.Config.HWType VM.Config.Memory VM.Config.Network VM.Config.Options VM.Migrate VM.Monitor VM.PowerMgmt User.Modify\"\n</code></pre> <p>Assign the role to the new user:</p> <pre><code>pveum aclmod / -user homelab@pve -role HomeLab\n</code></pre> <p>Create a authentication token: </p> <pre><code>pveum user token add homelab@pve iac --privsep=0\n</code></pre> <p>Then you will presented with something similar to below, save the full-tokenid and value in a safe place for later.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 key          \u2502 value                                \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 full-tokenid \u2502 homelab@pve!iac                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 info         \u2502 {\"privsep\":\"0\"}                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 value        \u2502 207c9ff1-96f3-44d4-8439-87da57f5fc26 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"new_homelab/#github","title":"Github","text":"<p>Get the generated github public key and add it to your github account at Github keys</p> <pre><code>cat .ssh/github.pub\n</code></pre> <p>Configure git</p> <pre><code>git config --global user.name Ragr3n\ngit config --global user.email robin@ragren.com\n</code></pre> <p>Clone the repository</p> <pre><code>git clone XXX \n</code></pre>"},{"location":"new_homelab/#dependencies","title":"Dependencies","text":"<p>The repo contains files and folders required to manage my homelab and to make life easier a nix shell is provided with all dependencies that are needed to run Ansible, Tofu, nixos-rebuild, SOPS and some other utility's. </p> <pre><code>nix develop\n</code></pre>"},{"location":"new_homelab/#sops-secrets-operations","title":"SOPS: Secrets OPerationS","text":"<p>SOPS is a editor that encrypts/decrypts files. One way to use SOPS is to store variables in a yaml file and encrypt the values using a age keypair derived from a SSH key. We can then use the variables in Ansible, Tofu and NixOS and store our secret variables in git.</p> <p>Create a folder to store age keys in and use the previously generated SSH key to create age keypair.</p> <pre><code>mkdir -p ~/.config/sops/age/\nnix run nixpkgs#ssh-to-age -- -private-key -i ~/.ssh/homelab &gt; ~/.config/sops/age/keys.txt\nnix shell nixpkgs#age -c age-keygen -y ~/.config/sops/age/keys.txt\n\nage1gwmxg9kqrkfqek4lkkv0l70tsjlvftj4jrevu6a8pf0m34smp43qc27wys\n</code></pre> <p>Copy the age key that is shown in the terminal and add it to the .sops.yaml file located in the root of the project. If the file doesn't exist create it with this content and change the age key to the one you generated.</p> <pre><code>keys:\n  - &amp;primary age1gwmxg9kqrkfqek4lkkv0l70tsjlvftj4jrevu6a8pf0m34smp43qc27wys\ncreation_rules:\n  - path_regex: secrets/[^/]+\\.(yaml|json|env|ini)$\n    #- path_regex: secrets/secrets.yaml$\n    key_groups:\n      - age:\n          - *primary\n</code></pre> <p>I've saved the clear text version of the secrets/secrets.yaml file in bitwarden but it's also possible to just take the content of secrets/secrets.yaml remove the sops: array and edit the variables since the variable names are stored in clear text. Then use below command to encrypt the file.</p> <pre><code>sops -i -e secrets/secrets.yaml\n</code></pre> <p>Be careful to not commit the file without first encrypting it. Use the VSCode extension @signageos/vscode-sops to easily edit SOPS encrypted files and automatically encrypt them.</p>"},{"location":"new_homelab/#templates","title":"Templates","text":"<p>I've created a couple of ansible roles to deploy VM and LXC templates to proxmox, this is how to use them.</p> <p>Change in to the Ansible directory, edit the inventory/proxmox.yaml file and run one or more playbooks to generate VM or LXC templates in Proxmox.</p> <pre><code>hl-ansible #Alias for cd *homelabdir*/ansible\ncode inventory/proxmox.yml\nansible-playbook create-template-nixos-vm.yml -i inventory/proxmox.yml\nansible-playbook create-template-nixos-lxc.yml -i inventory/proxmox.yml\nansible-playbook create-template-hassos-vm.ymlt -i inventory/proxmox.yml  \n</code></pre>"},{"location":"new_homelab/#opentofu","title":"OpenTofu","text":"<p>OpenTofu is a opensource fork of terraform that makes it possible to define infrastructure as code. </p> <p>I've chosen to keep the provider config in the main.tf file and separate pve-****-.tf files for each deployed node. This way I can easily edit, create new or destroy nodes without affecting others.</p> <p>Change in to the tofu directory, copy and or edit tofu files as desired.</p> <pre><code>hl-tofu #Alias for cd *homelabdir*/tofu\ncode main.tf\ncp pve-vm-nixos-01.tf pve-vm-nixos-02.tf\ncode pve-vm-nixos-02.tf\n</code></pre> <p>Plan the config and make sure it looks alright and then apply it.</p> <pre><code>tofu plan\n# Output removed\ntofu apply \ndata.sops_file.secrets: Reading...\ndata.sops_file.secrets: Read complete after 0s [id=-]\nOpenTofu used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\n\nOpenTofu will perform the following actions:\n\n  # proxmox_virtual_environment_vm.vm-nixos-02 will be created\n  + resource \"proxmox_virtual_environment_vm\" \"vm-nixos-02\" {\n      + acpi                    = true\n      + bios                    = \"seabios\"\n      + id                      = (known after apply)\n      + ipv4_addresses          = (known after apply)\n      # Output abbreviated\n    }\n\nPlan: 1 to add, 0 to change, 0 to destroy.\n\nDo you want to perform these actions?\n  OpenTofu will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\n  Enter a value: yes\n\nproxmox_virtual_environment_vm.vm-nixos-02: Creating...\nproxmox_virtual_environment_vm.vm-nixos-02: Creation complete after 8s \n</code></pre>"},{"location":"new_homelab/#adding-keys-to-sops","title":"Adding keys to SOPS","text":"<p>To be able to deploy NixOS configurations that utilizes SOPS secrets to remote servers, the remote servers age key needs to be added to the .sops.yaml file.</p> <p>To make the process a bit easier i've made a shell script (update-age) that takes an IP as input and then adds the public ssh key to known_hosts, adds the key to .sops.yaml and updates encryption keys for secrets/secrets.yaml</p> <pre><code>update-age \nIP-address: 10.0.10.30\nSyncing keys for file ./secrets/secrets.yaml\nThe following changes will be made to the file's groups:\nGroup 1\n    age1gwmxg9kqrkfqek4lkkv0l70tsjlvftj4jrevu6a8pf0m34smp43qc27wys\n+++ age1gwmxg9kqrkfqek4lkkv0l70tsjlvftj4jrevu6a8pf0m34smp43qc27hek\n</code></pre>"},{"location":"new_homelab/#nixos","title":"NixOS","text":"<p>NixosConfigurations created in the flake.nix can be deployed by using nixos-rebuild and specifying --target-host</p> <pre><code>hl-root #Alias for cd *homelabdir*\nnixos-rebuild switch --flake .#vm-nixos-01 --target-host 10.0.10.30 --use-remote-sudo\nnixos-rebuild switch --flake .#lxc-nixos-01 --target-host 10.0.10.31 --use-remote-sudo\n</code></pre>"},{"location":"new_homelab/#reboot","title":"Reboot","text":"<p>It is probably a good idea to reboot the newly created LXC:s or VM:s once after creation and initial deploy. That can be accomplished by this one liner.</p> <pre><code>ssh 10.0.10.30 \"sudo reboot\"\nssh 10.0.10.31 \"sudo reboot\"\n</code></pre>"}]}